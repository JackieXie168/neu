/*
  Both styles of C++ comments are supported.  This is a multiline
  comment. This is an NML file to be parsed with NMLParser. Call
  process() on an NObject subclass to execute the code.
 */

// import NLib functions into the main scope, so that they are
// callable as functions rather than methods on an object
import NLib;

// call one of the imported functions
a = sin(2.0);
Print("a is %v", a);

// construct the C++-side object and call some methods on it
o = new CPPObject;

x = o.add(1, 3);
Print("x is %v", x);

y = o.product([1,2,3,4,5]);
Print("y is %v", y);

// an NML-side object
class NMLObject{
  // all methods are "public" 

  // unlike C++, there are no default constructors
  NMLObject(){
    attr = 10;
  }

  // we can also consruct an object as a base class of any other
  // NObject here, NRandom
  NMLObject(a, b) : NRandom(){
    attr = a + b;
  }
  
  // the return type and parameter types are not specified, they
  // are implicitly of type nvar
  sum(items){
    ret = 0;

    for(i = 0; i < items.size(); ++i){
      ret += items[i];
    }

    return ret;
  }
  
  printAttr(){
    Print("attr is %v", attr);
  }

  // any type of statement can be given at the top-level of the class
  // they are executed when an instance of the class is created
  // in this case we effectively set an "attribute" variable
  attr = 9;
}

// call some of the NML object methods
o2 = new NMLObject;
s = o2.sum([1,2,3,4]);
Print("s is %v", s);
o2.printAttr();
