Block(HType(doubleMe,HTC(Num(a)),HTo(a,a)),HFunc(doubleMe(x),Add(x,x)),HType(test',HTo(Int,Int)),HFunc(test'(a),HLet(Tuple([x,Add(a,1)]),x)),HType(doubleUs,HTC(Num(a)),HTo(a,a,a)),HFunc(doubleUs(x,y),Add(Mul(x,2),Mul(y,2))),HType(doubleSmallNumber,HTo(Int,Int)),HFunc(doubleSmallNumber(x),HIf(GT(x,100),x,Mul(x,2))),HType(doubleSmallNumber',HTo(Int,Int)),HFunc(doubleSmallNumber'(x),Add(HIf(GT(x,100),x,Mul(x,2)),1)),HType(boomBangs,HTo([Int],[String])),HFunc(boomBangs(xs),HLC(HIf(LT(x,10),"BOOM!","BANG!"),HSet(x,xs),HCall(odd(x)))),HType(length',HTo([a],Int)),HFunc(length'(xs),HCall(sum(HLC(1,HSet(HAny(),xs))))),HType(removeNonUppercase,HTo([Char],[Char])),HFunc(removeNonUppercase(st),HLC(c,HSet(c,st),HCall(elem(c,Eval(HRangeList(Char("A"),Char("Z"))))))),HType(charName,HTo(Char,String)),HFunc(charName(Char("a")),"Albert"),HFunc(charName(Char("b")),"Broseph"),HFunc(charName(Char("c")),"Cecil"),HType(addVectors,HTC(Num(a)),HTo(Tuple(a,a),Tuple(a,a),Tuple(a,a))),HFunc(addVectors(Tuple(x1,y1),Tuple(x2,y2)),Tuple(Add(x1,x2),Add(y1,y2))),HType(first'',HTo(Tuple(a,b,c),a)),HFunc(first''(Tuple(x,HAny(),HAny())),x),HType(tell,HTC(Show(a)),HTo([a],String)),HFunc(tell([]),"The list is empty"),HFunc(tell(HCons(x,[])),HConcat("The list has one element: ",HCall(show(x)))),HFunc(tell(HCons(HCons(x,y),[])),HConcat("The list has two elements: ",HConcat(HCall(show(x)),HConcat(" and ",HCall(show(y)))))),HFunc(tell(HCons(HCons(x,y),HAny())),HConcat("This list is long. The first two elements are: ",HConcat(HCall(show(x)),HConcat(" and ",HCall(show(y)))))),HType(capital,HTo(String,String)),HFunc(capital(""),"Empty string, whoops!"),HFunc(capital(HPA(all,HCons(x,xs))),HConcat("The first letter of ",HConcat(all,HConcat(" is ",Eval([x]))))),HType(bmiTell,HTC(RealFloat(a)),HTo(a,String)),HGuardFunc(bmiTell(bmi),[Tuple(LE(bmi,18.5),"Below"),Tuple(LE(bmi,25),"Normal"),Tuple(LE(bmi,30),"Above"),Tuple(otherwise,"Large")]),HType(bmiTell',HTC(RealFloat(a)),HTo(a,a,String)),HGuardFunc(bmiTell'(weight,height),[Tuple(LE(bmi,below),"Below"),Tuple(LE(bmi,normal),"Normal"),Tuple(LE(bmi,above),"Above"),Tuple(otherwise,"Large")],Tuple([bmi,Div(weight,Pow(height,2))],[below,18.5],[normal,25],[above,30])),HType(initials,HTo(String,String,String)),HFunc(initials(firstname,lastname),HWhere(HConcat(Eval([f]),HConcat(". ",HConcat(Eval([l]),"."))),Tuple([HCons(f,HAny()),firstname],[HCons(l,HAny()),lastname]))),HType(cylinder,HTC(RealFloat(a)),HTo(a,a,a)),HFunc(cylinder(r,h),HLet(Tuple([sideArea,Mul(Mul(Mul(2,pi),r),h)],[topArea,Mul(pi,Pow(r,2))]),Add(sideArea,Mul(2,topArea)))),HType(head',HTo([a],a)),HFunc(head'(xs),HCase(xs,[[[],HCall(error("No head for empty lists!"))],[HCons(x,HAny()),x]])),HType(describeList,HTo([a],String)),HFunc(describeList(xs),HWhere(HConcat("The list is ",HCall(what(xs))),Tuple(HFunc(what([]),"empty."),HFunc(what([x]),"a singleton list."),HFunc(what(xs),"a longer list.")))),HType(replicate',HTC(Num(i),Ord(i)),HTo(i,a,[a])),HGuardFunc(replicate'(n,x),[Tuple(LE(n,0),[]),Tuple(otherwise,HCons(x,HCall(replicate'(Sub(n,1),x))))]),HType(take',HTC(Num(i),Ord(i)),HTo(i,[a],[a])),HGuardFunc(take'(n,HAny()),[Tuple(LE(n,0),[])]),HFunc(take'(HAny(),[]),[]),HFunc(take'(n,HCons(x,xs)),HCons(x,HCall(take'(Sub(n,1),xs)))),HType(reverse',HTo([a],[a])),HFunc(reverse'([]),[]),HFunc(reverse'(HCons(x,xs)),HConcat(HCall(reverse'(xs)),Eval([x]))),HType(repeat',HTo(a,[a])),HFunc(repeat'(x),HCons(x,HCall(repeat'(x)))),HType(zip',HTo([a],[b],[Tuple(a,b)])),HFunc(zip'(HAny(),[]),[]),HFunc(zip'([],HAny()),[]),HFunc(zip'(HCons(x,xs),HCons(y,ys)),HCons(Tuple(x,y),HCall(zip'(xs,ys)))),HType(elem',HTC(Eq(a)),HTo(a,[a],Bool)),HFunc(elem'(a,[]),False),HGuardFunc(elem'(a,HCons(x,xs)),[Tuple(EQ(a,x),True),Tuple(otherwise,HCall(elem(a,xs)))]),HType(quicksort,HTC(Ord(a)),HTo([a],[a])),HFunc(quicksort([]),[]),HFunc(quicksort(HCons(x,xs)),HLet(Tuple([smallerSorted,HCall(quicksort(HLC(a,HSet(a,xs),LE(a,x))))],[biggerSorted,HCall(quicksort(HLC(a,HSet(a,xs),GT(a,x))))]),HConcat(smallerSorted,HConcat(Eval([x]),biggerSorted)))),HType(multThree,HTC(Num(a)),HTo(a,a,a,a)),HFunc(multThree(x,y,z),Mul(Mul(x,y),z)),HType(divideByTen,HTC(Floating(a)),HTo(a,a)),HFunc(divideByTen(),HRFunc("/",10)),HType(isUpperAlphanum,HTo(Char,Bool)),HFunc(isUpperAlphanum(),HRFunc([:"elem", end:3538, line:130, start:3534],Eval(HRangeList(Char("A"),Char("Z"))))),HType(applyTwice,HTo(HTo(a,a),a,a)),HFunc(applyTwice(f,x),HCall(f(HCall(f(x))))),HType(zipWith',HTo(HTo(a,HTo(b,c)),[a],[b],[c])),HFunc(zipWith'(HAny(),[],HAny()),[]),HFunc(zipWith'(HAny(),HAny(),[]),[]),HFunc(zipWith'(f,HCons(x,xs),HCons(y,ys)),HCons(HCall(f(x,y)),HCall(zipWith'(f,xs,ys)))),HType(flip',HTo(HTo(a,HTo(b,c)),b,a,c)),HFunc(flip'(f,y,x),HCall(f(x,y))),HType(map',HTo(HTo(a,b),[a],[b])),HFunc(map'(HAny(),[]),[]),HFunc(map'(f,HCons(x,xs)),HCons(HCall(f(x)),HCall(map(f,xs)))),HType(filter',HTo(HTo(a,Bool),[a],[a])),HFunc(filter'(HAny(),[]),[]),HGuardFunc(filter'(p,HCons(x,xs)),[Tuple(HCall(p(x)),HCons(x,HCall(filter(p,xs)))),Tuple(otherwise,HCall(filter(p,xs)))]),HType(quicksort',HTC(Ord(a)),HTo([a],[a])),HFunc(quicksort'([]),[]),HFunc(quicksort'(HCons(x,xs)),HLet(Tuple([smallerSorted,HCall(quicksort'(HCall(filter(HRFunc("<=",x),xs))))],[biggerSorted,HCall(quicksort'(HCall(filter(HRFunc(">",x),xs))))]),HConcat(smallerSorted,HConcat(Eval([x]),biggerSorted)))),HType(largestDivisible,HTC(Integral(a)),a),HFunc(largestDivisible(),HWhere(HCall(head(HCall(filter(p,HInfList(100000,99999))))),Tuple(HFunc(p(x),EQ(HCall(mod(x,3829)),0))))),HType(chain,HTC(Integral(a)),HTo(a,[a])),HFunc(chain(1),[1]),HGuardFunc(chain(n),[Tuple(HCall(even(n)),HCons(n,HCall(chain(HCall(div(n,2)))))),Tuple(HCall(odd(n)),HCons(n,HCall(chain(Add(Mul(n,3),1)))))]),HType(numLongChains,Int),HFunc(numLongChains(),HWhere(HCall(length(HCall(filter(isLong,HCall(map(chain,HRangeList(1,100))))))),Tuple(HFunc(isLong(xs),GT(HCall(length(xs)),15))))),HType(sum',HTC(Num(a)),HTo([a],a)),HFunc(sum'(),HCall(foldl(HRFunc("+"),0))),HType(maximum',HTC(Ord(a)),HTo([a],a)),HFunc(maximum'(),HCall(foldr1(HLambda([x,acc],HIf(GT(x,acc),x,acc))))),HType(reverse'',HTo([a],[a])),HFunc(reverse''(),HCall(foldl(HLambda([acc,x],HCons(x,acc)),[]))),HType(product',HTC(Num(a)),HTo([a],a)),HFunc(product'(),HCall(foldr1(HRFunc("*")))),HType(filter'',HTo(HTo(a,Bool),[a],[a])),HFunc(filter''(p),HCall(foldr(HLambda([x,acc],HIf(HCall(p(x)),HCons(x,acc),acc)),[]))),HType(head'',HTo([a],a)),HFunc(head''(),HCall(foldr1(HLambda([x,HAny()],x)))),HType(last',HTo([a],a)),HFunc(last'(),HCall(foldl1(HLambda([HAny(),x],x)))),HType(add',HTo(Int,Int,Int)),HFunc(add'(a,b),Add(a,b)),HType(addThree',HTo(Int,Int,Int,Int)),HFunc(addThree'(a,b,c),Add(Add(a,b),c)),HType(oddSquareSum,Integer),HFunc(oddSquareSum(),HDollar(HCompose(sum,HCompose(HCall(takeWhile(HRFunc("<",10000))),HCompose(HCall(filter(odd)),HCall(map(HRFunc("^",2)))))),HInfList(1))),HData(Tuple(Shape1),[Tuple(Circle1,Float,Float,Float),Tuple(Rectangle1,Float,Float,Float,Float)]),HType(surface,HTo(Shape1,Float)),HFunc(surface(HDataParam(Circle1,HAny(),HAny(),r)),Mul(pi,Pow(r,2))),HFunc(surface(HDataParam(Rectangle1,x1,y1,x2,y2)),Mul(HDollar(abs,Sub(x2,x1)),HDollar(abs,Sub(y2,y1)))),HData(Tuple(Point),[Tuple(Point,Float,Float)],[Show]),HData(Tuple(Shape),[Tuple(Circle,Point,Float),Tuple(Rectangle,Point,Point)],[Show]),HType(nudge,HTo(Shape,Float,Float,Shape)),HFunc(nudge(HDataParam(Circle,HDataParam(Point,x,y),r),a,b),HCall(Circle(HCall(Point(Add(x,a),Add(y,b))),r))),HFunc(nudge(HDataParam(Rectangle,HDataParam(Point,x1,y1),HDataParam(Point,x2,y2)),a,b),HCall(Rectangle(HCall(Point(Add(x1,a),Add(y1,b))),HCall(Point(Add(x2,a),Add(y2,b)))))),HType(baseCircle,HTo(Float,Shape)),HFunc(baseCircle(r),HCall(Circle(HCall(Point(0,0)),r))),HType(baseRect,HTo(Float,Float,Shape)),HFunc(baseRect(width,height),HCall(Rectangle(HCall(Point(0,0)),HCall(Point(width,height))))),HTypeDef(Tuple(PhoneBook),[Tuple(String,String)]),HData(Tuple(Car),[HRecord(Tuple(Car),[HType(company,String),HType(model,String),HType(year,Int)])],[Show]),HData(Tuple(Person),[HRecord(Tuple(Person),[HType(firstName,String),HType(lastName,String),HType(age,Int),HType(height,Float),HType(phoneNumber,String),HType(flavor,String)])],[Show]),HType(tellCar,HTo(Car,String)),HFunc(tellCar(HSetRecord(Car,Tuple(Tuple(company,c),Tuple(model,m),Tuple(year,y)))),HConcat("This ",HConcat(c,HConcat(" ",HConcat(m,HConcat(" was made in ",HCall(show(y)))))))),HData(Tuple(TestVector,a),[Tuple(TestVector,a,a,a)],[Show]),HType(vplus,HTC(Num(t)),HTo(HParamType(TestVector,t),HParamType(TestVector,t),HParamType(TestVector,t))),HFunc(vplus(HDataParam(TestVector,i,j,k),HDataParam(TestVector,l,m,n)),HCall(TestVector(Add(i,l),Add(j,m),Add(k,n)))),HType(vectMult,HTC(Num(t)),HTo(HParamType(TestVector,t),t,HParamType(TestVector,t))),HFunc(vectMult(HDataParam(TestVector,i,j,k),m),HCall(TestVector(Mul(i,m),Mul(j,m),Mul(k,m)))),HType(scalarMult,HTC(Num(t)),HTo(HParamType(TestVector,t),HParamType(TestVector,t),t)),HFunc(scalarMult(HDataParam(TestVector,i,j,k),HDataParam(TestVector,l,m,n)),Add(Add(Mul(i,l),Mul(j,m)),Mul(k,n))),HData(Tuple(Day),[Tuple(Monday),Tuple(Tuesday),Tuple(Wednesday),Tuple(Thursday),Tuple(Friday),Tuple(Saturday),Tuple(Sunday)],[Eq,Ord,Show,Read,Bounded,Enum]),HTypeDef(Tuple(AssocList,k,v),[Tuple(k,v)]),HData(Tuple(TrafficLight),[Tuple(Red),Tuple(Yellow),Tuple(Green)]),HInstance(Eq,TrafficLight,[HFunc(EQ(Red,Red),True),HFunc(EQ(Green,Green),True),HFunc(EQ(Yellow,Yellow),True),HFunc(EQ(HAny(),HAny()),False)]),HFunc(main(),HDo(HCall(print(9)),HCall(print(2)),HCall(print(3.2)),HCall(print([3,4,3])))))
<< Add(Add(HCall(succ(9)),HCall(max(5,4))),1)
16
<< Add(Add(HCall(succ(9)),HCall(max(5,4))),1)
16
<< HCall(max(100,101))
101
<< HCall(doubleUs(4,9))
26
<< HCall(doubleUs(2.3,34.2))
73
<< Add(HCall(doubleUs(28,88)),HCall(doubleMe(123)))
478
<< HCall(doubleSmallNumber(7))
14
<< HCall(doubleSmallNumber'(7))
15
<< HConcat([1,2,3,4],[9,10,11,12])
[1,2,3,4,9,10,11,12]
<< HConcat("hello",HConcat(" ","world"))
"hello world"
<< HConcat(Eval([Char("w"),Char("o")]),Eval([Char("o"),Char("t")]))
"woot"
<< HCons(Char("A")," SMALL CAT")
"A SMALL CAT"
<< HCons(5,[1,2,3,4,5])
[5,1,2,3,4,5]
<< HIdx("Steve Buscemi",6)
Char("B")
<< HIdx([9.4,33.2,96.2,11.2,23.25],1)
33.2
<< HTopLet(b,[[1,2,3,4],[5,3,3,3],[1,2,2,3,4],[1,2,3]])
none
<< b
[[1,2,3,4],[5,3,3,3],[1,2,2,3,4],[1,2,3]]
<< HRangeList(1,20)
[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
<< Eval(HRangeList(Char("a"),Char("z")))
"abcdefghijklmnopqrstuvwxyz"
<< HRangeList(2,4,20)
[2,4,6,8,10,12,14,16,18,20]
<< HRangeList(0.1,0.3,1)
[0.1,0.3,0.5,0.7,0.9,1.0999999999999999]
<< HCall(take(10,HCall(repeat(5))))
[5,5,5,5,5,5,5,5,5,5]
<< HLC(Mul(x,2),HSet(x,HRangeList(1,10)))
[2,4,6,8,10,12,14,16,18,20]
<< HLC(Mul(x,2),HSet(x,HRangeList(1,10)),GE(Mul(x,2),12))
[12,14,16,18,20]
<< HLC(x,HSet(x,HRangeList(50,100)),EQ(HCall(mod(x,7)),3))
[52,59,66,73,80,87,94]
<< HLC(x,HSet(x,HRangeList(10,20)),NE(x,13),NE(x,15),NE(x,19))
[10,11,12,14,16,17,18,20]
<< HLC(Mul(x,y),HSet(x,[2,5,10]),HSet(y,[8,10,11]),GT(Mul(x,y),50))
[55,80,100,110]
<< HTopLet(nouns,["prince","frog","pope"])
none
<< HTopLet(adjectives,["lazy","grouchy","scheming"])
none
<< HLC(HConcat(adjective,HConcat(" ",noun)),HSet(adjective,adjectives),HSet(noun,nouns))
["lazy prince","lazy frog","lazy pope","grouchy prince","grouchy frog","grouchy pope","scheming prince","scheming frog","scheming pope"]
<< HCall(length'([1,2,3]))
3
<< HTopLet(xxs,[[1,3,5,2,3,1,2,4,5],[1,2,3,4,5,6,7,8,9],[1,2,4,2,1,6,3,1,3,2,3,6]])
none
<< HLC(HLC(x,HSet(x,xs),HCall(even(x))),HSet(xs,xxs))
[[2,2,4],[2,4,6,8],[2,4,2,6,2,6]]
<< HCall(fst(Tuple(8,11)))
8
<< HCall(zip([1,2,3,4,5],[5,5,5,5,5]))
Eval([Tuple(1,5),Tuple(2,5),Tuple(3,5),Tuple(4,5),Tuple(5,5)])
<< HTopLet(rightTriangles,HLC(Tuple(a,b,c),HSet(c,HRangeList(1,10)),HSet(b,Eval(HRangeList(1,c))),HSet(a,Eval(HRangeList(1,b))),EQ(Add(Pow(a,2),Pow(b,2)),Pow(c,2))))
none
<< rightTriangles
Eval([Tuple(3,4,5),Tuple(6,8,10)])
<< HCall(removeNonUppercase("AaBbCc"))
"ABC"
<< HCall(addVectors(Tuple(1,2),Tuple(3,4)))
Tuple(4,6)
<< HCall(first''(Tuple(2,3,4)))
2
<< HCall(tell([1]))
"The list has one element: 1"
<< HCall(tell([1,2]))
"The list has two elements: 1 and 2"
<< HCall(tell([1,2,3]))
"This list is long. The first two elements are: 1 and 2"
<< HCall(capital("FooBar"))
"The first letter of FooBar is F"
<< HCall(bmiTell(23))
"Normal"
<< HCall(bmiTell'(140,29))
"Below"
<< HCall(initials("Charles","Smith"))
"C. S."
<< HCall(cylinder(1,2))
18.8496
<< Eval([HIf(GT(5,3),"Woo","Boo"),HIf(GT(Char("a"),Char("b")),"Foo","Bar")])
["Woo","Bar"]
<< Add(Mul(4,HLet(Tuple([a,9]),Add(a,1))),2)
48
<< Eval([HLet(Tuple([a,5]),a)])
[5]
<< HCall(max(Add(1,1),Add(2,3)))
5
<< HCall(max(4,5))
5
<< HCall(replicate'(4,5))
[5,5,5,5]
<< HCall(take'(3,[4,5,6,7,8]))
[4,5,6]
<< HCall(reverse'([1,2,3]))
[3,2,1]
<< HCall(take'(3,HCall(repeat'(5))))
[5,5,5]
<< HCall(zip'([1,2,3],[4,5,6]))
Eval([Tuple(1,4),Tuple(2,5),Tuple(3,6)])
<< HCall(elem'(2,[1,2,3]))
True
<< HCall(quicksort([4,1,4,7,3,2]))
[1,2,3,4,4,7]
<< HTopLet(multTwoWithNine,HCall(multThree(9)))
none
<< HCall(multTwoWithNine(2,3))
54
<< HTopLet(multWithEighteen,HCall(multTwoWithNine(2)))
none
<< HCall(multWithEighteen(10))
180
<< HCall(divideByTen(1000))
100
<< HCall(applyTwice(HRFunc("*",2),3))
12
<< HCall(applyTwice(HCall(multThree(2,2)),9))
144
<< HCall(applyTwice(HLFunc(3,":"),[1]))
[3,3,1]
<< HCall(zipWith'(HRFunc("+"),[4,2,5,6],[2,6,2,3]))
[6,8,7,9]
<< HCall(zipWith'(max,[6,3,2,1],[7,3,1,5]))
[7,3,2,5]
<< HCall(zipWith'(HRFunc("++"),["foo ","bar ","baz "],["fighters","hoppers","aldrin"]))
["foo fighters","bar hoppers","baz aldrin"]
<< HCall(zipWith'(HRFunc("*"),HCall(replicate(5,2)),HInfList(1)))
[2,4,6,8,10]
<< HCall(zipWith'(HCall(zipWith'(HRFunc("*"))),[[1,2,3],[3,5,6],[2,3,4]],[[3,2,2],[3,4,5],[5,4,3]]))
[[3,4,6],[9,20,30],[10,12,12]]
<< HCall(flip'(zip,[1,2,3,4,5],"hello"))
Eval([Tuple(Char("h"),1),Tuple(Char("e"),2),Tuple(Char("l"),3),Tuple(Char("l"),4),Tuple(Char("o"),5)])
<< HCall(zipWith(HCall(flip'(div)),HInfList(2,2),[10,8,6,4,2]))
[5,4,3,2,1]
<< HCall(map'(HRFunc("+",3),[1,5,3,1,6]))
[4,8,6,4,9]
<< HCall(map'(HRFunc("++","!"),["BIFF","BANG","POW"]))
["BIFF!","BANG!","POW!"]
<< HCall(map'(HCall(replicate(3)),HRangeList(3,6)))
[[3,3,3],[4,4,4],[5,5,5],[6,6,6]]
<< HCall(map'(HCall(map(HRFunc("^",2))),[[1,2],[3,4,5,6],[7,8]]))
[[1,4],[9,16,25,36],[49,64]]
<< HCall(map'(fst,Eval([Tuple(1,2),Tuple(3,5),Tuple(6,3),Tuple(2,6),Tuple(2,5)])))
[1,3,6,2,2]
<< HCall(filter(HRFunc(">",3),[1,5,3,2,1,6,4,3,2,1]))
[5,6,4]
<< HCall(filter(HRFunc("==",3),[1,2,3,4,5]))
[3]
<< HCall(filter(even,HRangeList(1,10)))
[2,4,6,8,10]
<< HLet(Tuple(HFunc(notNull(x),HCall(not(HCall(null(x)))))),HCall(filter(notNull,[[1,2,3],[],[3,4,5],[2,2],[],[],[]])))
[[1,2,3],[3,4,5],[2,2]]
<< HCall(filter(HRFunc([:"elem", end:19, line:1, start:15],Eval(HRangeList(Char("a"),Char("z")))),"BeCaUsE I aM diFfeRent"))
"easadifeent"
<< HCall(filter(HRFunc([:"elem", end:19, line:1, start:15],Eval(HRangeList(Char("A"),Char("Z")))),"difFrent CasES"))
"FCES"
<< HCall(quicksort'([4,1,4,7,3,2]))
[1,2,3,4,4,7]
<< HCall(sum(HCall(takeWhile(HRFunc("<",10000),HCall(filter(odd,HCall(map(HRFunc("^",2),HInfList(1)))))))))
166650
<< HCall(sum(HCall(takeWhile(HRFunc("<",10000),HLC(Pow(n,2),HSet(n,HInfList(1)),HCall(odd(Pow(n,2))))))))
166650
<< HCall(chain(30))
[30,15,46,23,70,35,106,53,160,80,40,20,10,5,16,8,4,2,1]
<< HCall(zipWith(HLambda([a,b],Div(Add(Mul(a,30),3),b)),[5,4,3,2,1],[1,2,3,4,5]))
[153,61.5,31,15.75,6.6]
<< HCall(map(HLambda([Tuple(a,b)],Add(a,b)),Eval([Tuple(1,2),Tuple(3,5),Tuple(6,3),Tuple(2,6),Tuple(2,5)])))
[3,8,9,8,7]
<< HCall(sum'([1,2,3,4]))
10
<< HDollar(sum,HDollar(HCall(filter(HRFunc(">",10))),HCall(map(HRFunc("*",2),HRangeList(2,10)))))
80
<< HDollar(and,HCall(map(HRFunc(">",4),[5,6,7,8])))
True
<< HDollar(and,HCall(map(HRFunc("==",4),[4,4,4,3,4])))
False
<< HDollar(HCall(take(10)),HCall(iterate(HRFunc("*",2),1)))
[1,2,4,8,16,32,64,128,256,512]
<< HDollar(sum,HDollar(HCall(takeWhile(HRFunc("<",10000))),HCall(map(HRFunc("^",3),HInfList(1)))))
53361
<< HDollar(HCompose(HCall(filter(odd)),HCall(map(HRFunc("^",2)))),HRangeList(1,10))
[1,9,25,49,81]
<< HDollar(HCall(map(HRFunc("^",2))),HRangeList(1,10))
[1,4,9,16,25,36,49,64,81,100]
<< HCall(map(HRFunc("^",2),HRangeList(1,10)))
[1,4,9,16,25,36,49,64,81,100]
<< HCall(map(HLambda([x],HCall(negate(HCall(abs(x))))),[5,-3,-6,7,-3,2,-19,24]))
[-5,-3,-6,-7,-3,-2,-19,-24]
<< HCall(map(HLambda([xs],HCall(negate(HCall(sum(HCall(tail(xs))))))),Eval([HRangeList(1,5),HRangeList(3,6),HRangeList(1,7)])))
[-14,-15,-27]
<< HCall(map(HCompose(negate,HCompose(sum,tail)),Eval([HRangeList(1,5),HRangeList(3,6),HRangeList(1,7)])))
[-14,-15,-27]
<< oddSquareSum
166650
<< HDollar(and,HCall(map(HRFunc(">",4),[5,6,7,8])))
True
<< HDollar(surface,HCall(Circle1(10,20,10)))
314.159
<< HDollar(surface,HCall(Rectangle1(0,0,100,100)))
10000
NHSParser error: 1: syntax error
<< HCall(nudge(HCall(Circle(HCall(Point(34,34)),10)),5,10))
HCall(Circle(HCall(Point(39,44)),10))
<< HCall(nudge(HCall(baseRect(40,100)),60,23))
HCall(Rectangle(HCall(Point(60,23)),HCall(Point(100,123))))
<< HSetRecord(Car,Tuple(Tuple(company,"Ford"),Tuple(model,"Mustang"),Tuple(year,1967)))
HSetRecord(Car,Tuple(Tuple(company,"Ford"),Tuple(model,"Mustang"),Tuple(year,1967)))
<< HTopLet(stang,HSetRecord(Car,Tuple(Tuple(company,"Ford"),Tuple(model,"Mustang"),Tuple(year,1967))))
none
<< HCall(tellCar(stang))
"This Ford Mustang was made in 1967"
<< HCall(tellCar(HCall(Car("Ford","Mustang",1967))))
"This Ford Mustang was made in 1967"
<< HCall(vplus(HCall(TestVector(3,5,8)),HCall(TestVector(9,2,8))))
HCall(TestVector(12,7,16))
<< HCall(vplus(HCall(vplus(HCall(TestVector(3,5,8)),HCall(TestVector(9,2,8)))),HCall(TestVector(0,2,3))))
HCall(TestVector(12,9,19))
<< HCall(vectMult(HCall(TestVector(3,9,7)),10))
HCall(TestVector(30,90,70))
<< HCall(scalarMult(HCall(TestVector(4,9,5)),HCall(TestVector(9,2,4))))
74
<< HCall(vectMult(HCall(TestVector(2,9,3)),HCall(scalarMult(HCall(TestVector(3,7,8)),HCall(TestVector(9,2,4))))))
HCall(TestVector(146,657,219))
<< HCall(show(Wednesday))
"Wednesday"

