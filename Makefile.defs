# comment out to enable precise mode
# (building nreal and libneu_core with GMP and MPFR libraries)
export NO_PRECISE = 1

# uncomment to enable build of Neu Java interface lib
# set JAVA_INCLUDE and JAVA_LINK appropriately

# something similar to the below should work on the Mac
# export JAVA_INCLUDE = -I/Library/Java/JavaVirtualMachines/jdk1.8.0_25.jdk/Contents/Home/include -I/Library/Java/JavaVirtualMachines/jdk1.8.0_25.jdk/Contents/Home/include/darwin
# export JAVA_LINK = -L/Library/Java/JavaVirtualMachines/jdk1.8.0_25.jdk/Contents/Home/jre/lib/server

# something similar to the below should work on Linux
# export JAVA_INCLUDE = -I$(HOME)/jdk1.8.0_25/include -I$(HOME)/jdk1.8.0_25/include/linux
# export JAVA_LINK = -L$(HOME)/jdk1.8.0_25/jre/lib/amd64/server

# optimization level for release build
export OPT = -O2

# build threads
export BUILD_THREADS = 8

# paths to additional include directories
export INCLUDE_DIRS = -I/usr/local/include

# C++ compiler
export CXX = c++

# C compiler
export CC = cc

# LLVM install directory
export LLVM_DIR = $(NEU_HOME)/llvm/build-release

# neu library path
export NEU_LIB = $(NEU_HOME)/lib

# system platform
export PLATFORM = $(shell uname)

# use libc++ if compiling on Mac
ifeq ($(PLATFORM), Darwin)
  STD_LIB = -stdlib=libc++
endif

# command for HTTP get
ifeq ($(PLATFORM), Darwin)
  HTTP_GET = curl -O
else
  HTTP_GET = wget
endif

# beginning of C++ compile command
export COMPILE = $(CXX) -std=c++11 $(STD_LIB) -I$(NEU_HOME)/include $(INCLUDE_DIRS) -fPIC -Wno-deprecated-register

# beginning of C compile command
export COMPILE_C = $(CC) -fPIC -I$(NEU_HOME)/include

# optimization or debug flags
ifdef NEU_RELEASE
  COMPILE += $(OPT) -DNDEBUG
  COMPILE_C += $(OPT) -DNDEBUG
else
  COMPILE += -g
  COMPILE_C += -g
endif

# beginning of link command
export LINK = $(CXX) $(STD_LIB)
